#!/usr/bin/env python

from twisted.internet import reactor, defer
from txdbus import client

name = "Avahi Interface Test"
port = 12345
stype = "_avahitest._tcp"
domain = ""
host = ""
text = ["hello=world"]
    
class AvahiPublish():

    avahi_bus_name    = 'org.freedesktop.Avahi'
    avahi_object_path = '/'
    
    @defer.inlineCallbacks
    def start(self):
        
        con = yield client.connect(reactor, 'system')
        
        # Get a handle to the server
        server = yield con.getRemoteObject( self.avahi_bus_name,
                                            self.avahi_object_path )
        
        # Create a new entry group -> Get back path to objects
        group_path = yield server.callRemote('EntryGroupNew')
        
        # Get entry group object
        self.group = yield con.getRemoteObject( self.avahi_bus_name,
                                                group_path )

        # The D-Bus interfaces requires the text strings to be arrays of byte arrays
        encoded_text = [ [ord(c) for c in s] for s in text ]
            
        # Finally call the add service method
        self.group.callRemote('AddService',
                              -1, # IF_UNSPEC
                              -1, # PROTO_UNSPEC
                              0,
                              name, stype, domain, host, port,
                              encoded_text)
        
        # and commit the changes
        self.group.callRemote('Commit')
        
        print "Avahi service has been published..."
        
        
    def stop(self):
        print "Stopping.."
        self.group.callRemote('Reset')

ap = AvahiPublish()
reactor.callWhenRunning(ap.start)
reactor.addSystemEventTrigger('before', 'shutdown', ap.stop)
reactor.run()
